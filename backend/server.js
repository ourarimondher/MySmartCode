// backend/server.js

<<<<<<< HEAD
require('dotenv').config();        // Charger les variables d'environnement depuis .env
=======
require('dotenv').config(); // Charger les variables d'environnement
>>>>>>> 9d4798899de4ea789d5e01ec06657ae969674901
const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const bcrypt = require('bcryptjs');
const path = require('path');

// Import des mod√®les et routes
const Admin = require('./models/Admin');
const authRoutes = require('./routes/authRoutes');
const courseRoutes = require('./routes/courseRoutes');
const studentRoutes = require('./routes/studentRoutes');

const app = express();

// üîß Middlewares
<<<<<<< HEAD
app.use(cors());                  
app.use(express.json());           
app.use('/uploads', express.static(path.join(__dirname, 'uploads'))); 

// üåê Route racine pour tester dans navigateur
app.get('/', (req, res) => {
  res.send('Bienvenue sur le backend MySmartCode üöÄ');
});

// üì¶ D√©finition des routes API
=======
app.use(cors());
app.use(express.json());

// üìÅ Dossier statique pour les fichiers upload√©s
app.use('/uploads', express.static(path.join(__dirname, 'uploads')));

// üì¶ API Routes
>>>>>>> 9d4798899de4ea789d5e01ec06657ae969674901
app.use('/api/auth', authRoutes);
app.use('/api/courses', courseRoutes);
app.use('/api/students', studentRoutes);

<<<<<<< HEAD
// üöÄ Fonction principale : connexion MongoDB + d√©marrage serveur
async function startServer() {
  try {
    // Connexion √† MongoDB Atlas
    await mongoose.connect(process.env.MONGODB_URI);
    console.log('‚úÖ MongoDB connect√©');

    // Cr√©er automatiquement l'administrateur si inexistant
    await createAdminIfNotExists();

    // PORT dynamique pour Render
    const PORT = process.env.PORT || 5000;
    app.listen(PORT, () => {
      console.log(`üöÄ Serveur backend lanc√© sur le port ${PORT}`);
=======
// üß™ Endpoint de test pour v√©rifier que le backend fonctionne
app.get('/api/test', (req, res) => {
  res.status(200).json({ message: 'Test r√©ussi ! Backend fonctionne üöÄ' });
});

// üîç Endpoint de health check pour Render
app.get('/healthz', (req, res) => {
  res.status(200).json({ status: 'OK', message: 'Backend is running üöÄ' });
});

// üè† Route racine pour v√©rifier que le serveur est accessible
app.get('/', (req, res) => {
  res.send('Bienvenue sur le backend MySmartCode üöÄ');
});

// üöÄ Connexion √† MongoDB + d√©marrage du serveur
async function startServer() {
  try {
    await mongoose.connect(process.env.MONGODB_URI, {
      useNewUrlParser: true,
      useUnifiedTopology: true
    });
    console.log('‚úÖ MongoDB connect√©');

    // Cr√©er un admin par d√©faut si aucun n‚Äôexiste
    await createAdminIfNotExists();

    const PORT = process.env.PORT || 5000;
    // ‚ö° Render exige d‚Äô√©couter sur 0.0.0.0
    app.listen(PORT, "0.0.0.0", () => {
      console.log(`üöÄ Serveur backend lanc√© sur port ${PORT}`);
>>>>>>> 9d4798899de4ea789d5e01ec06657ae969674901
    });
  } catch (err) {
    console.error('‚ùå Erreur MongoDB ou serveur :', err);
  }
}

<<<<<<< HEAD
// üõ°Ô∏è Cr√©ation automatique de l‚Äôadmin
=======
// üõ°Ô∏è Cr√©ation automatique de l‚Äôadmin (si non existant)
>>>>>>> 9d4798899de4ea789d5e01ec06657ae969674901
async function createAdminIfNotExists() {
  const adminEmail = 'admin@gmail.com';
  const adminPassword = 'admin123';

  try {
    const existingAdmin = await Admin.findOne({ email: adminEmail });
    if (existingAdmin) {
      console.log('‚ÑπÔ∏è Admin d√©j√† existant');
      return;
    }

    const hashedPassword = await bcrypt.hash(adminPassword, 10);
    const newAdmin = new Admin({ email: adminEmail, password: hashedPassword });
    await newAdmin.save();

    console.log('‚úÖ Admin cr√©√© automatiquement :', adminEmail);
  } catch (error) {
    console.error('‚ùå Erreur cr√©ation admin :', error);
  }
}

<<<<<<< HEAD
// ‚ñ∂Ô∏è Lancer le serveur
=======
// ‚ñ∂Ô∏è D√©marrer le serveur
>>>>>>> 9d4798899de4ea789d5e01ec06657ae969674901
startServer();
